/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.exemplojts.visao;

import com.mycompany.exemplojts.NewClass;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author caio
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ValorA = new javax.swing.JTextField();
        ValorB = new javax.swing.JTextField();
        Confirmar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        EqualsAB = new javax.swing.JLabel();
        EqualsBA = new javax.swing.JLabel();
        DisjointAB = new javax.swing.JLabel();
        DisjointBA = new javax.swing.JLabel();
        IntersectsAB = new javax.swing.JLabel();
        IntersectsBA = new javax.swing.JLabel();
        TouchesAB = new javax.swing.JLabel();
        TouchesBA = new javax.swing.JLabel();
        CrossesAB = new javax.swing.JLabel();
        CrossesBA = new javax.swing.JLabel();
        WithinAB = new javax.swing.JLabel();
        WithinBA = new javax.swing.JLabel();
        ContainsAB = new javax.swing.JLabel();
        ContainsBA = new javax.swing.JLabel();
        OverlapsAB = new javax.swing.JLabel();
        OverlapsBA = new javax.swing.JLabel();
        CoversAB = new javax.swing.JLabel();
        CoversBA = new javax.swing.JLabel();
        CoveredBYAB = new javax.swing.JLabel();
        CoveredBYBA = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("A");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel2.setText("B");

        ValorA.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        ValorB.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        Confirmar.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        Confirmar.setText("OK");
        Confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel3.setText("Binary Predicates");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        jLabel4.setText("Equals");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel5.setText("AB");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jLabel6.setText("BA");

        jLabel7.setText("Disjoint");
        jLabel7.setAutoscrolls(true);

        jLabel8.setText("Intersects");

        jLabel9.setText("Touches");

        jLabel10.setText("Crosses");

        jLabel11.setText("Within");

        jLabel12.setText("Contains");

        jLabel13.setText("Overlaps");

        jLabel14.setText("Covers");

        jLabel15.setText("CoveredBY");

        EqualsAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        EqualsAB.setText("-");

        EqualsBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        EqualsBA.setText("-");

        DisjointAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        DisjointAB.setText("-");

        DisjointBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        DisjointBA.setText("-");

        IntersectsAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        IntersectsAB.setText("-");

        IntersectsBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        IntersectsBA.setText("-");

        TouchesAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        TouchesAB.setText("-");

        TouchesBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        TouchesBA.setText("-");

        CrossesAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CrossesAB.setText("-");

        CrossesBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CrossesBA.setText("-");

        WithinAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        WithinAB.setText("-");

        WithinBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        WithinBA.setText("-");

        ContainsAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        ContainsAB.setText("-");

        ContainsBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        ContainsBA.setText("-");

        OverlapsAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        OverlapsAB.setText("-");

        OverlapsBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        OverlapsBA.setText("-");

        CoversAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CoversAB.setText("-");

        CoversBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CoversBA.setText("-");

        CoveredBYAB.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CoveredBYAB.setText("-");

        CoveredBYBA.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        CoveredBYBA.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(ValorB, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(ValorA)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(Confirmar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(EqualsAB)
                            .addComponent(DisjointAB)
                            .addComponent(IntersectsAB)
                            .addComponent(TouchesAB)
                            .addComponent(CrossesAB)
                            .addComponent(WithinAB)
                            .addComponent(ContainsAB)
                            .addComponent(OverlapsAB)
                            .addComponent(CoversAB)
                            .addComponent(CoveredBYAB))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EqualsBA)
                                    .addComponent(DisjointBA)
                                    .addComponent(IntersectsBA)
                                    .addComponent(TouchesBA)
                                    .addComponent(CrossesBA)
                                    .addComponent(WithinBA)
                                    .addComponent(ContainsBA)
                                    .addComponent(OverlapsBA)
                                    .addComponent(CoversBA)
                                    .addComponent(CoveredBYBA))
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(ValorA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(ValorB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(Confirmar)))
                .addGap(41, 41, 41)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(EqualsAB)
                    .addComponent(EqualsBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(DisjointAB)
                    .addComponent(DisjointBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(IntersectsAB)
                    .addComponent(IntersectsBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(TouchesAB)
                    .addComponent(TouchesBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(CrossesAB)
                    .addComponent(CrossesBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(WithinAB)
                    .addComponent(WithinBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(ContainsAB)
                    .addComponent(ContainsBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(OverlapsAB)
                    .addComponent(OverlapsBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(CoversAB)
                    .addComponent(CoversBA))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(CoveredBYAB)
                    .addComponent(CoveredBYBA))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmarActionPerformed
        // TODO add your handling code here:
        WKTReader reader = new WKTReader();
        
        try {
            Geometry geometria1 = reader.read(ValorA.getText());
            Geometry geometria2 = reader.read(ValorB.getText());
            
            EqualsAB.setText(equalsAB(geometria1,geometria2));
            EqualsBA.setText(equalsBA(geometria1,geometria2));
            DisjointAB.setText(disjointAB(geometria1,geometria2));
            DisjointBA.setText(disjointBA(geometria1,geometria2));
            IntersectsAB.setText(intersectsAB(geometria1,geometria2));
            IntersectsBA.setText(intersectsBA(geometria1,geometria2));
            TouchesAB.setText(touchesAB(geometria1,geometria2));
            TouchesBA.setText(touchesBA(geometria1,geometria2));
            CrossesAB.setText(crossesAB(geometria1,geometria2));
            CrossesBA.setText(crossesBA(geometria1,geometria2));
            WithinAB.setText(withinAB(geometria1,geometria2));
            WithinBA.setText(withinBA(geometria1,geometria2));
            ContainsAB.setText(containsAB(geometria1,geometria2));
            ContainsBA.setText(containsBA(geometria1,geometria2));
            OverlapsAB.setText(overlapsAB(geometria1,geometria2));
            OverlapsBA.setText(overlapsBA(geometria1,geometria2));
            CoversAB.setText(coversAB(geometria1,geometria2));
            CoversBA.setText(coversBA(geometria1,geometria2));
            CoveredBYAB.setText(coveredBYAB(geometria1,geometria2));
            CoveredBYBA.setText(coveredBYBA(geometria1,geometria2));
            
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Dados Incorretos", "Mensagem de Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Confirmar;
    private javax.swing.JLabel ContainsAB;
    private javax.swing.JLabel ContainsBA;
    private javax.swing.JLabel CoveredBYAB;
    private javax.swing.JLabel CoveredBYBA;
    private javax.swing.JLabel CoversAB;
    private javax.swing.JLabel CoversBA;
    private javax.swing.JLabel CrossesAB;
    private javax.swing.JLabel CrossesBA;
    private javax.swing.JLabel DisjointAB;
    private javax.swing.JLabel DisjointBA;
    private javax.swing.JLabel EqualsAB;
    private javax.swing.JLabel EqualsBA;
    private javax.swing.JLabel IntersectsAB;
    private javax.swing.JLabel IntersectsBA;
    private javax.swing.JLabel OverlapsAB;
    private javax.swing.JLabel OverlapsBA;
    private javax.swing.JLabel TouchesAB;
    private javax.swing.JLabel TouchesBA;
    private javax.swing.JTextField ValorA;
    private javax.swing.JTextField ValorB;
    private javax.swing.JLabel WithinAB;
    private javax.swing.JLabel WithinBA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables

    private String equalsAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.equals(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String equalsBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.equals(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String disjointAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.disjoint(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String disjointBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.disjoint(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String intersectsAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.intersects(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String intersectsBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.intersects(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String touchesAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.touches(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String touchesBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.touches(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String crossesAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.crosses(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String crossesBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.crosses(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String withinAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.within(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String withinBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.within(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String containsAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.contains(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String containsBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.contains(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String overlapsAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.overlaps(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String overlapsBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.overlaps(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String coversAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.covers(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String coversBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.covers(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }

    private String coveredBYAB(Geometry geometria1, Geometry geometria2) {
        if(geometria1.coveredBy(geometria2)){
            return "V";
        }else{
            return "F";
        }
    }

    private String coveredBYBA(Geometry geometria1, Geometry geometria2) {
        if(geometria2.coveredBy(geometria1)){
            return "V";
        }else{
            return "F";
        }
    }
}
